#lang racket
(require "utilities.rkt")
(require "slipnet.rkt")

(define this-slipnet (make-slipnet empty empty))

(define this-slipnet-nodes-alphabet (map (lambda(name) (make-node name 10 0)) alphabet))
(define this-slipnet-nodes-numbers (map (lambda(name) (make-node name 30 0)) numbers))
(define this-slipnet-nodes-categories (list
                                       (make-node 'letter-category 30 0)
                                       (make-node 'length 60 0)
                                       (make-node 'alphabetic-position 80 0)
                                       (make-node 'string-position 70 0)
                                       (make-node 'object-category 90 0)
                                       (make-node 'bond-category 80 0)
                                       (make-node 'group-category 80 0)))
(define this-slipnet-nodes-intrinsic (list
                                      (make-node 'identity 90 0)
                                      (make-node 'opposite 90 0)
                                      (make-node 'predecessor 50 0)
                                      (make-node 'successor 50 0)))
(define this-slipnet-nodes-other (list
                                  (make-node 'first 60 0)
                                  (make-node 'last 60 0)
                                  (make-node 'leftmost 40 0)
                                  (make-node 'rightmost 40 0)
                                  (make-node 'left 40 0)
                                  (make-node 'right 40 0)
                                  (make-node 'direction 70 0)
                                  (make-node 'middle 40 0)
                                  (make-node 'whole 40 0)
                                  (make-node 'single 40 0)
                                  (make-node 'letter 20 0)
                                  (make-node 'group 80 0)
                                  (make-node 'sameness 80 0)
                                  (make-node 'predecessor-group 50 0)
                                  (make-node 'successor-group 50 0)
                                  (make-node 'sameness-group 80 0)))

(set! this-slipnet (slipnet-nodes-append this-slipnet this-slipnet-nodes-alphabet))
(set! this-slipnet (slipnet-nodes-append this-slipnet this-slipnet-nodes-numbers))
(set! this-slipnet (slipnet-nodes-append this-slipnet this-slipnet-nodes-categories))
(set! this-slipnet (slipnet-nodes-append this-slipnet this-slipnet-nodes-intrinsic))
(set! this-slipnet (slipnet-nodes-append this-slipnet this-slipnet-nodes-other))



(define (intrinsic-link-length type)
  (second (assoc type
                 '((successor 60)
                   (predecessor 60)
                   (identity 0)
                   (opposite 80)))))

(define this-slipnet-links-alphabet-successor (make-links-within-list alphabet 'lateral 'successor (intrinsic-link-length 'successor)))
(define this-slipnet-links-alphabet-predecessor (make-links-within-list (reverse alphabet) 'lateral 'predecessor (intrinsic-link-length 'predecessor)))
(define this-slipnet-links-numbers-successor (make-links-within-list numbers 'lateral 'successor (intrinsic-link-length 'successor)))
(define this-slipnet-links-numbers-predecessor (make-links-within-list (reverse numbers) 'lateral 'predecessor (intrinsic-link-length 'predecessor)))

(define make-links-category-instance (lambda(other alonames) (apply append (map (lambda(name) (slipnet-make-links-double this-slipnet name other '(category instance) '(#f #f) 100)) alonames))))

(define this-slipnet-links-alphabet-letter-category (apply append (map (lambda(name) (slipnet-make-links-double this-slipnet name 'letter-category '(category instance) '(#f #f) 97)) alphabet)))
(define this-slipnet-links-numbers-length (make-links-category-instance 'length numbers))
(define this-slipnet-links-opposite (apply append (map (lambda(alos) (make-links-reversed (car alos) (cadr alos) 'slip 'opposite (intrinsic-link-length 'opposite)))
                                                       (list
                                                        '(first last)
                                                        '(leftmost rightmost)
                                                        '(left right)
                                                        '(successor predecessor)
                                                        '(predecessor-group successor-group)))))
(define this-slipnet-links-category-instance (apply append (map (lambda(alos) (make-links-category-instance (car alos) (cadr alos)))
                                                                '((object-category (letter group))
                                                                  (string-position (leftmost rightmost middle single whole))
                                                                  (alphabetic-position (first last))
                                                                  (direction (left right))
                                                                  (bond-category (predecessor successor sameness))
                                                                  (group-category (predecessor-group successor-group sameness-group))))))
(define this-slipnet-links-fixed (append (list
                                          (make-link 'a 'first 'property #f 75)
                                          (make-link 'z 'last 'property #f 75)
                                          (make-link 'sameness 'sameness-group 'slip #f 30)
                                          (make-link 'sameness-group 'sameness 'slip #f 90)
                                          (make-link 'successor 'successor-group 'slip #f 60)
                                          (make-link 'successor-group 'successor 'slip #f 90)
                                          (make-link 'predecessor 'predecessor-group 'slip #f 60)
                                          (make-link 'predecessor-group 'predecessor 'slip #f 90)
                                          (make-link 'sameness-group 'length 'slip #f 95)
                                          (make-link 'successor-group 'length 'slip #f 95)
                                          (make-link 'predecessor-group 'length 'slip #f 95)
                                          (make-link 'sameness-group 'letter-category 'slip #f 50))
                                         (append
                                          (make-links-reversed 'left 'leftmost 'slip #f 90)
                                          (make-links-reversed 'left 'rightmost 'slip #f 100)
                                          (make-links-reversed 'right 'leftmost 'slip #f 100)
                                          (make-links-reversed 'right 'rightmost 'slip #f 90)
                                          (make-links-reversed 'first 'leftmost 'slip #f 100)
                                          (make-links-reversed 'first 'rightmost 'slip #f 100)
                                          (make-links-reversed 'last 'leftmost 'slip #f 100)
                                          (make-links-reversed 'last 'rightmost 'slip #f 100)
                                          (make-links-reversed 'letter-category 'length 'slip #f 95)
                                          (make-links-reversed 'letter 'group 'slip #f 90)
                                          (make-links-reversed 'single 'whole 'slip #f 90))))

(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-alphabet-successor))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-alphabet-predecessor))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-numbers-successor))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-numbers-predecessor))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-alphabet-letter-category))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-numbers-length))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-opposite))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-category-instance))
(set! this-slipnet (slipnet-links-append this-slipnet this-slipnet-links-fixed))
                                         